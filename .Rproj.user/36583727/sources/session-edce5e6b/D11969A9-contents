---
title: "Trichodesmium and UCYN-A Targeted Pipeline"
author: "IKern"
date: "09/27/2022"
output:
  pdf_document: default
  html_document: default
editor_options:
  chunk_output_type: inline
---

This markdown script controls the targeted pipeline for targeted data. 
The script handles data from both QE and TQS instruments, 
as well as data processed by Skyline and MSDial metabolomics processing platforms.

It contains four major sections: 
Section I: Import and cleaning/rearranging of data.
Section II: Quality control using user-defined parameters. 
Section III: Applying Best-Matched Internal Standard (B-MIS).
Section IV: Quantifying peak area to umol/vial when possible.

In order to run this script, you will need the following items:
1. The instrument output in csv format from either MSDial or Skyline.
2. A sample key from the run, which should include information such as the Column, the Bio Normalization,
the Volume Filtered, and the Dilution Factor. An example of this is included in the data_extras/ subdirectory.

*Remember to change the "title" at the top of the page to your project. Below, add a short description of your project*
This is a template for the Ingalls Targeted Pipeline.

```{r setup, include=TRUE}
knitr::opts_chunk$set(echo = TRUE)

library(anytime)
library(rlist)
library(tidyr)
library(tidyverse)
options(scipen=999)
currentDate <- Sys.Date()

source("src/Functions.R")

processed.folder <- "data_processed" 
intermediate.folder <- "data_intermediate"
extras.folder <- "data_extras"
raw.folder <- "data_raw"
figures.folder <- "figures"

dir.create(file.path(".", processed.folder))  
dir.create(file.path(".", intermediate.folder))  
dir.create(file.path(".", extras.folder))
dir.create(file.path(".", raw.folder))
dir.create(file.path(".", figures.folder))  

if (length(dir(path = "data_processed/")) == 0) {
  cat("\nData_processed subdirectory has been created and is ready for new data.")
} else {
  cat("Warning: some or all of the subdirectories are not empty. Empty contents before continuing.\n")
}
```


If you would like to empty the data_processed/, data_intermediate, and figures/ subdirectories, run the following code.
```{r, include = TRUE}
toClear <- c("data_processed/", "data_intermediate", "figures/")
f <- list.files(toClear, include.dirs = F, full.names = T, recursive = T)
file.remove(f)

print("Subdirectories emptied.")
```

----------------------------------------------------------------------------------------------------------------------------
Section I: Import all MSDial files that have been split by Area, Mass/charge (Mz), Retention Time (RT), and Signal to Noise (SN). 
Or, import your single Skyline file in long format. Once files are imported and cleaned, ensure that the compound names are 
updated with the latest Ingalls Standards sheet.

Steps for MSDial data:
Set header, filter unknowns.
Change variable classes from character/factor to numeric, according to column.
Rearrange the dataframes and combine to a single frame in long format.
Standardize dataset by removing "Ingalls_" prefixes from compound names, and removing the syntactically correct "X" from the Replicates column.

For Skyline data:
Ensure all columns are the appropriate class (numeric, character, etc.)

***
Inputs: 
"data_raw/*file.pattern*.csv
Outputs: 
"data_intermediates/*software.pattern*_combined_*file.pattern*_*DATE*.csv"
***

*User action required*
Comment or uncomment the file.pattern, software.pattern, instrument.pattern, and matching.pattern required for your files.
The file.pattern is the variable that will help the program pick out the correct file from the data_raw folder, and may need to be changed by the user according to the filename. It should be unique to the file(s) you want to analyze. 
The instrument.pattern refers to which instrument was used to analyze the data.

TODO check that this is correct
The matching.pattern and software.pattern variables *should not be changed by the user*, only commented or uncommented.
```{r Pattern matching, include = TRUE}
### Choose software pattern ###
# MSDial
# software.pattern <- "MSDial"

## Skyline
software.pattern <- "Skyline"

####################################

### Choose instrument pattern ###
# QE
instrument.pattern <- "QE"

# TQS
# instrument.pattern <- "TQS"

####################################

### Create file pattern ###
file.pattern <- "TrichoUCYNA"

####################################

### Choose matching pattern ###
# Cyano 
#matching.pattern <- "Cyano"

# HILIC
matching.pattern <- "pos|neg"

print(paste("Your software type is:", software.pattern))
print(paste("The instrument used in this run is:", instrument.pattern))
print(paste("Your file matching pattern is:", file.pattern))
print(paste("Your run type is:", matching.pattern))
```


```{r Imports, include = TRUE}
source("src/File_Import.R")

print("Required files imported.")
```

*User action required*
This step changes depending on whether you are using Skyline or MSDial.

Enter the existing filenames of your run. The above code assigns the variables in R to their filename in the directory, so if your positive Area file is "data_processed/PositiveArea.csv", it will be imported to this code as PositiveArea. Those files need to be reassigned to Area.positive so the rest of the code will know which files to edit for the pipeline steps.

Comment or uncomment the block of variable names appropriate for your run.

```{r Dataset reassignment, include = TRUE}
## Comment out the run not being used.

## Skyline Cyano variables:
# skyline.RP.Cyano <- Ant18_QE_Cyano

## Skyline HILIC variables: 
# skyline.HILIC.neg <- X181116_HILIC_neg_MESO.SCOPE_HRM
skyline.HILIC.pos <- TrichoUCYNA_Skyline_Results_All_Stds

## MSDial Cyano variables: 
# Area.RP.Cyano <- Area_CYANO_Example
# Mz.RP.Cyano   <- Mz_CYANO_Example
# RT.RP.Cyano   <- RT_CYANO_Example
# SN.RP.Cyano   <- SN_CYANO_Example

## MSDial HILIC variables: 
# Area.positive <- Area_HILICPos_Example
# Mz.positive   <- Mz_HILICPos_Example
# RT.positive   <- RT_HILICPos_Example
# SN.positive   <- SN_HILICPos_Example
# 
# Area.negative <- Area_HILICNeg_Example
# Mz.negative   <- Mz_HILICNeg_Example
# RT.negative   <- RT_HILICNeg_Example
# SN.negative   <- SN_HILICNeg_Example

print(paste(file.pattern, instrument.pattern, software.pattern, "variables assigned."))
```

Check if dataset is MSDial or Skyline, rearrange if so, and export.
```{r Dataset rearrangement, include = TRUE}
if (software.pattern == "MSDial") {
  source("src/MSDial_Rearrange.R")
  print("Data rearrange complete. Exporting file to data_intermediate.")
} else {
  source("src/Skyline_Rearrange.R")
  print("This is a Skyline datafile. Exporting file to data_intermediate.")
}

# Clear environment
rm(list = setdiff(ls()[!ls() %in% c("file.pattern", "currentDate", "instrument.pattern", "software.pattern")], lsf.str()))
```

# Making new Internal Standards that updates consistently
```{r}
# making new internal standards
Ingalls.Standards <- read.csv("https://raw.githubusercontent.com/IngallsLabUW/Ingalls_Standards/master/Ingalls_Lab_Standards.csv",
                              stringsAsFactors = FALSE, header = TRUE) %>%
  # filter(Column == Column.Type) %>%
  rename(Metabolite.Name = Compound_Name) %>%
  select(Metabolite.Name, Compound_Type, Concentration_uM, HILIC_Mix, Empirical_Formula) %>% #QE.RF.ratio
  filter(!is.na(Concentration_uM)) 

Internal_Standard_Names <- Ingalls.Standards %>%
  filter(Compound_Type == "Internal Standard") %>%
  mutate(Concentration_nM = Concentration_uM * 1000) %>%
  select(-c(Concentration_uM)) %>%
  rename(Internal_Standards = Metabolite.Name) %>%
  mutate(Matched_Compounds = Internal_Standards) %>% 
  mutate(Matched_Compounds = str_remove(Matched_Compounds, ",.*")) %>% 
  select(-c(HILIC_Mix, Compound_Type, Empirical_Formula))

write.csv(Internal_Standard_Names, "data_extras/Internal_Standard_Names.csv", row.names = FALSE)
```



--------------------------------------------------------------

Section II: Quality Control and flagging of problematic peaks.

In the Quality Control Step for QE files:
Import files.
Identify run types and check if all are present (blk, smp, std, poo).
Create a table of standard retention times (RT) for comparison.
Create a table of areas from blank runs for comparison.
Flag peaks in the dataset that fall outside of user-defined bounds.
Add parameter values to the top of the final file and save to the data_processed/ folder.

Additional TQS step:
Create standard ion ratio table for comparison.

***
Inputs: 
"data_intermediate/*software.pattern*_combined_*file.pattern*_*DATE*.csv"

Outputs: 
"data_intermediate/*software.pattern*_*instrument.pattern*_RT.table_*DATE*.csv"
"data_intermediate/*software.pattern*_*instrument.pattern*_SN.table_*DATE*.csv"
"data_intermediate/*software.pattern*_*instrument.pattern*_area.table_*DATE*.csv"
"data_intermediate/*software.pattern*_*instrument.pattern*_final.table_*DATE*.csv"
"data_intermediate/*software.pattern*_*instrument.pattern*_blank.table_*DATE*.csv"
"data_processed/*instrument.pattern*_QC_Output_*file.pattern*_*DATE*.csv"
Additional TQS Output:
"data_processed/*instrument.pattern*_IR.table_*DATE*.csv"
***

*User action required*
Define parameters for quality control. These act as comparison for filtering out data.
The numbers will change depending on whether you are analyzing HILIC vs Cyano data, or if you are measuring TQS vs QE data.

```{r QC parameters, include = TRUE}
# QE + TQS QC parameters

area.min   <- 1000 # HILIC - 1000, Cyano - 5000
RT.flex    <- 0.4 # HILIC +/- 0.4 min, Cyano +/- 0.2 min 
blk.thresh <- 0.3 # HILIC +/- 0.3, Cyano +/- 0.2
SN.min     <- 4 # HILIC - 4, Cyano - 4
height.min <- 1000
height.max <- 1.0e8


# Additional QC parameters for Skyline TQS 
# Comment this out when using MSDial
area.max <- 1.0e8
IR.flex  <- 0.3
ppm.flex <- 7

print("Parameter values assigned.")
```

Run Quality Control and export.
```{r MSDial and Skyline QC, include=TRUE}
if (software.pattern == "MSDial") {
  source("src/MSDial_QC.R")
} else {
  source("src/Skyline_QC.R")  
}
```

Inspect the blank.table, final.table, and RT.table values, which currently exist in the environment.
Ensure that they look normal before proceeding to clear the environment in the next step.
```{r, include = TRUE}
currentDate <- Sys.Date()
csvFileName <- paste("data_processed/", software.pattern, "_", instrument.pattern,
                     "_QC_Output_", file.pattern, "_", currentDate, ".csv", sep = "")

tables <- grep("table", names(.GlobalEnv), value = TRUE, ignore.case = TRUE)
tablelist <- do.call("list", mget(tables))

# Write intermediate data
invisible(lapply(tables, 
                 function(x) write.csv(get(x), file=paste("data_intermediate/",
                                                            software.pattern, "_",
                                                          instrument.pattern,
                                                            "_", x, "_", currentDate,
                                                          ".csv", sep = ""))))
# Write final data
write.csv(final.table, csvFileName, row.names = FALSE)

print(paste(tables, "saved to data/intermediate"))

rm(list = setdiff(ls()[!ls() %in% c("file.pattern")], lsf.str()))
```

--------------------------------------------------------------

Section III: Best-Matched Internal Standard (B-MIS)

In the BMIS step:
If working with HILIC data, identify and remove duplicates. Justify your decision.
Match QC'd data with Internal Standards list.
Identify internal standards and visualize those areas.
Test if replicate names are identical across the data and the sample key. Stop the analysis process if not.
Identify/visualize internal standards. Look over it to ensure that things are looking more or less "normal".
Using pooled and sample runs, calculate internal standard averages.
Create an adjusted area for all pooled and sample runs by comparing each mass feature to each internal standard.
Calculate RSD for each mass feature/internal standard pair, and use this to choose a matched internal standard.
Decide whether to accept a B-MIS or not, according to user-defined values.

***
Inputs:
"data_extras/*Sample_Key_from_instrument*.csv"
"data_processed/*software.pattern*_*instrument.pattern*_QC_Output_*file.pattern*_*DATE*.csv"
Most recent Ingalls Lab Standards from GitHub:
https://raw.githubusercontent.com/IngallsLabUW/Ingalls_Standards/master/Ingalls_Lab_Standards_NEW.csv


Outputs:
"figures/IS.Raw.Areas.png"
"figures/BMIS_Evalution.png"
"data_intermediate/*instrument.pattern*_InternalStdIssues_*DATE*.csv"
"data_intermediate/MSDial_QuickReport_*file.pattern*_*DATE*.txt"
"data_processed/MSDial_BMIS_Output_*file.pattern*_*DATE*.csv"
***

*User action required*
Enter user data for cut off parameters.
cut.off = Decrease in RSD of pooled injections, aka improvement cutoff.
cut.off2 = Relative squared deviation minimum.

```{r BMIS cutoff values, include = TRUE}
cut.off <- 0.4
cut.off2 <- 0.1

print("B-MIS Cutoff values assigned.")
```

*User action required*
Comment out appropriate variable blocks according to HILIC or Cyano data.
```{r Cyano HILIC assignment, include = TRUE}

# MSDial
# software.pattern <- "MSDial"

# Skyline
software.pattern <- "Skyline"

# Cyano Skyline
# Column.Type = "RP"
# standards.pattern = "Ingalls"
# QC.pattern = "QC_Output_CyanoAq"

# Cyano MSDial
# Column.Type = "RP"
# standards.pattern = "Ingalls"
# QC.pattern = "QC_Output_CYANO"

# HILIC Skyline
Column.Type = "HILIC"
standards.pattern = "Ingalls"
QC.pattern = "QC_Output_HILIC"

# HILIC MSDial
# Column.Type = "HILIC"
# sample.key.pattern = "HILIC"
# standards.pattern = "Ingalls"
# QC.pattern = "QC_Output_HILIC"

print(paste(file.pattern, "column type, software pattern, standards pattern, and QC pattern assigned."))
```

Import required files.
```{r BMIS imports, include=TRUE}
source("src/BMIS_Imports.R")

print("BMIS files imported.")
```

If data is HILIC, identify duplicates and decide which to remove
IdentifyDuplicates function will confirm if instrument column data exists.
User will need to use best judgement to decide which duplicate to remove.
```{r Check duplicates, include=TRUE}
source("src/Check_Duplicates.R")
currentDate = Sys.Date()
csvFileName <- paste("data_intermediate/", software.pattern,
                     "_HILIC.duplicates_", currentDate, ".csv", sep = "")

# Using the duplicates.testing table, decide which detected compound to keep, the positive or negative.

if (exists("duplicates.testing") == TRUE) {
  print("This is a HILIC run. Look at duplicates.testing to decide which compounds to remove.")
} else {
  print("Non-HILIC data: no duplicates to remove.")
}

```

*User action required*
The below section automatically removes the HILICNeg compounds from the QC'd data.
This is not necessarily the correct solution: the user must look at the data to ensure that they are removing the right compounds.
```{r Remove duplicates, include = TRUE}
if (exists("duplicates.testing")) {
  QCd.data <- QCd.data %>%
    filter(!(Metabolite.Name %in% HILICS.duplicates$Metabolite.Name & Column == "HILICNeg")) # This line requires user attention.
  print("HILICS duplicates removed.")

  Report <- print(paste(HILICS.duplicates$Metabolite.Name, "HILICNeg"))
  cat(Report, file = "data_intermediate/MSDIAL_HILIC_DuplicateReport.txt")

  write.csv(duplicates.testing, csvFileName, row.names = FALSE)
} else {
  print("Non-HILIC data: no duplicates removed.")
}

```

Run BMIS.
```{r BMIS, include=TRUE}
source("src/BMIS.R")
```

--------------------------------------------------------------

Section IV: Convert from peak area to umol/vial.

In the quantify step:
Get response factors and response factor ratios.
Quantify samples without an internal standard.
Quantify samples with an internal standard.
Accounting for dilution and filtered volume, calculate environmental quantities.
Summarize carbon and nitrogen.

***
Inputs:
"data_extras/Ingalls_Lab_Standards.csv"
"data_extras/InternalStandardNames.csv"
"data_processed/BMIS_Output_*file.pattern*_*DATE*.csv"
"data_processed/MSDial_QC_Output_*file.pattern*_*DATE*.csv"

Outputs:
"data_intermediate/MSDial_ResponseFactorRatios_*DATE*.csv"
"data_processed/Quantified_Summary_*Column.Type*_*DATE*.csv
"data_processed/Quantified_Measurements*Column.Type*_*DATE*.csv
"data_processed/Quantified_perSampID_*Column.Type*_*DATE*.csv
***

*User action required*
Enter dilution factor, injection volume, and the filtered volume from the instrument run.
```{r, include = TRUE}
Dilution.Factor = 2
Reconstitution.Volume = 400 # microliters
Volume.Filtered = 5 # liters

print("Dilution factor, injection volume, and filtered volume assigned.")
```

*User action required*
Comment out appropriate variable blocks according to HILIC or Cyano data.
"BMIS.pattern" identifies the BMIS output from Section III.
"QC.pattern" identifies the QC'd output from Section II.
"names.pattern" identifies the Internal Standards names sheet.
"Column.Type" is fairly self-explanatory.

```{r, include = TRUE}
# Cyano
# BMIS.pattern = "BMIS_Output_RP"
# QC.pattern = "QC_Output_CYANO"
# names.pattern = "Names"
# Column.Type = "RP"

# HILIC
BMIS.pattern = "BMIS_Output_HILIC"
QC.pattern = "QC_Output_TrichoUCYNA"
names.pattern = "Names"
Column.Type = "HILIC"

print(paste(file.pattern, "matching patterns assigned."))

```

Import required files for quantification.
```{r Quantify imports, include = TRUE}
source("src/Skyline_Quantify_Imports.R")

print("Quantification files imported.")
```

Repeat the HILIC duplicates step.
```{r Check duplicates, include=TRUE}
check.duplicates <- list.files("data_intermediate", pattern = "duplicate", full.names = TRUE)

if (length(check.duplicates) == 0) {
  print("No HILIC data exists.")
} else {
  print("HILIC data exists.")

  HILICS.duplicates <- read.csv(check.duplicates, stringsAsFactors = FALSE)
}
```

*User action required*
If you are working with HILIC data, make sure your filtering step makes sense.
```{r Check duplicates, include=TRUE}

if (length(check.duplicates) == 0) {
  print("No HILIC data exists.")
} else {
  HILICS.duplicates <- read.csv(check.duplicates, stringsAsFactors = FALSE)
  QCd.data <- QCd.data %>%
    filter(!(Metabolite.Name %in% HILICS.duplicates$Metabolite.Name & Column == "HILICNeg"))
  print("Duplicates removed.")
}

```

Check which kinds of standards have been run.
*****************************************************************************
This function is unlikely to work on all runs due to sampID differences.
It will almost definitely need to be modified to apply to the dataset at hand.
*****************************************************************************
```{r, include = TRUE}
Full.stds.data <- CheckStandards2(Full.stds.data)
```

Quantify.
```{r, include = TRUE}
source("src/Skyline_Quantify.R")
```

Review the "Final" files to ensure everything is correct.

Save and export files.
```{r, include = FALSE}
currentDate <- Sys.Date()
csvFileName.summed <- paste("data_processed/Quantified_Summary_", Column.Type, "_", currentDate, ".csv", sep = "")
csvFileName.final <- paste("data_processed/Quantified_Measurements_", Column.Type, "_", currentDate, ".csv", sep = "")
csvFileName.perID <- paste("data_processed/Quantified_perSampID_", Column.Type, "_", currentDate, ".csv", sep = "")


write.csv(Final.Quantitative.Summed, csvFileName.summed, row.names = FALSE)
write.csv(Final.Quantitative, csvFileName.final, row.names = FALSE)
write.csv(Final.All.perSampID, csvFileName.perID, row.names = FALSE)
```

Clear environment.
```{r, include=FALSE}
rm(list = ls())
```
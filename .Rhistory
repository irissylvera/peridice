x = "Actual Values",
y = "Predicted Values") +
theme_bw()
ggplot(results, aes(x = actual, y = predicted1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
grad_pcr_model <- pcr(n_nmol~nmol+pc+pn, data = grad_pcr, scale = TRUE, validation = "CV")
test_peri <- predict(grad_pcr_model, newdata = peridice_pcr)
test_peri <- predict(grad_pcr_model, newdata = peridice_pcr)
test_peri <- predict(grad_pcr_model, newdata = peridice_pcr)
actual_values <- peridice_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.nmol.1.comps) %>%
rename(predicted2 = predicted.nmol.2.comps) %>%
rename(predicted3 = predicted.nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(unlist(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE))))
summary(grad_pcr_model)
results <- data.frame(actual = actual_values, predicted = test_peri)
View(results)
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(unlist(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE))))
summary(grad_pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
View(results)
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(unlist(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE))))
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps)
View(results)
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
View(results)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
test_grad <- predict(pcr_model, newdata = peridice_pcr)
test_grad <- predict(pcr_model, newdata = grad_pcr)
actual_values <- grad_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_grad)
View(results)
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
View(results)
summary(pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
actual_values <- grad_pcr$n_nmol
test_grad <- predict(pcr_model, newdata = grad_pcr)
summary(test_pcr)
summary(test_grad)
peridice_pcr <- peridice %>%
select(nmol, filename, metabolite, n_nmol = added_N_uM, pc, pn)
pcr_model <- pcr(n_nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
summary(pcr_model)
validationplot(pcr_model) # mean squared error
validationplot(pcr_model, val.type="MSEP") # cross validation mean squared error
validationplot(pcr_model, val.type = "R2") # R squared
predplot(pcr_model)
coefplot(pcr_model)
predplot(pcr_model)
predplot(grad_pcr)
predplot(grad_pcr_model)
validationplot(grad_pcr_model, val.type = "R2") # R squared
validationplot(grad_pcr_model, val.type="MSEP") # cross validation mean squared error
validationplot(grad_pcr_model) # mean squared error
validationplot(grad_pcr_model, val.type = "R2") # R squared
pcr_model <- pcr(nmol~n_nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
test_grad <- predict(pcr_model, newdata = grad_pcr)
summary(test_grad)
actual_values <- grad_pcr$n_nmol
actual_values <- grad_pcr$nmol
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.nmol.1.comps) %>%
rename(predicted2 = predicted.nmol.2.comps) %>%
rename(predicted3 = predicted.nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
summary(pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
View(results)
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.nmol.1.comps) %>%
rename(predicted2 = predicted.nmol.2.comps) %>%
rename(predicted3 = predicted.nmol.3.comps)
pcr_model <- pcr(nmol~n_nmol, data = peridice_pcr, scale = TRUE, validation = "CV")
test_grad <- predict(pcr_model, newdata = grad_pcr)
actual_values <- grad_pcr$nmol
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.nmol.1.comps)
results <- data.frame(actual = actual_values, predicted = test_grad)
View(results)
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = nmol.1.comps)
summary(pcr_model)
ggplot(results, aes(x = actual, y = predicted1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = nmol.1.comps)
summary(pcr_model)
ggplot(results, aes(x = actual, y = predicted1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
predplot(pcr_model)
coefplot(pcr_model)
pcr_model <- pcr(nmol~n_nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
test_grad <- predict(pcr_model, newdata = grad_pcr)
actual_values <- grad_pcr$nmol
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.nmol.1.comps) %>%
rename(predicted2 = predicted.nmol.2.comps) %>%
rename(predicted3 = predicted.nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.nmol.1.comps) %>%
rename(predicted2 = predicted.nmol.2.comps) %>%
rename(predicted3 = predicted.nmol.3.comps)
summary(pcr_model)
ggplot(results, aes(x = actual, y = predicted1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
predplot(pcr_model)
coefplot(pcr_model)
grad_pcr_model <- pcr(n_nmol~nmol+pc+pn, data = grad_pcr, scale = TRUE, validation = "CV")
test_peri <- predict(grad_pcr_model, newdata = peridice_pcr)
actual_values <- peridice_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
summary(grad_pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
ggplot(results, aes(x = actual, y = predicted1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
ggplot(results, aes(x = actual, y = predicted3)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
# peridice model
```{r}
pcr_model <- pcr(n_nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
summary(pcr_model)
validationplot(pcr_model) # mean squared error
validationplot(pcr_model, val.type="MSEP") # cross validation mean squared error
validationplot(pcr_model, val.type = "R2") # R squared
predplot(pcr_model)
pcr_model <- pcr(n_nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
summary(pcr_model)
validationplot(pcr_model) # mean squared error
validationplot(pcr_model, val.type="MSEP") # cross validation mean squared error
validationplot(pcr_model, val.type = "R2") # R squared
predplot(pcr_model)
coefplot(pcr_model)
grad_pcr_model <- pcr(n_nmol~nmol+pc+pn, data = grad_pcr, scale = TRUE, validation = "CV")
summary(grad_pcr_model)
validationplot(grad_pcr_model) # mean squared error
validationplot(grad_pcr_model, val.type="MSEP") # cross validation mean squared error
validationplot(grad_pcr_model, val.type = "R2") # R squared
predplot(grad_pcr_model)
coefplot(grad_pcr_model)
pcr_model <- pcr(n_nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
test_grad <- predict(pcr_model, newdata = grad_pcr)
summary(test_grad)
actual_values <- grad_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
summary(pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
grad_pcr_model <- pcr(n_nmol~nmol+pc+pn, data = grad_pcr, scale = TRUE, validation = "CV")
test_peri <- predict(grad_pcr_model, newdata = peridice_pcr)
actual_values <- peridice_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
summary(grad_pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
pcr_model <- pcr(nmol~n_nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
test_grad <- predict(pcr_model, newdata = grad_pcr)
actual_values <- grad_pcr$nmol
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.nmol.1.comps) %>%
rename(predicted2 = predicted.nmol.2.comps) %>%
rename(predicted3 = predicted.nmol.3.comps)
summary(pcr_model)
ggplot(results, aes(x = actual, y = predicted1)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
grad_pcr_model <- pcr(n_nmol~nmol+pc+pn, data = grad_pcr, scale = TRUE, validation = "CV")
test_peri <- predict(grad_pcr_model, newdata = peridice_pcr)
actual_values <- peridice_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
summary(grad_pcr_model)
ggplot(results, aes(x = actual, y = predicted3)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
View(peridice_pcr)
pcr_model <- pcr(n_nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "LOOCV")
pcr_model <- pcr(n_nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "LOO")
summary(pcr_model)
predplot(pcr_model)
coefplot(pcr_model)
grad_pcr_model <- pcr(n_nmol~nmol+pc+pn, data = grad_pcr, scale = TRUE, validation = "LOO")
summary(grad_pcr_model)
predplot(grad_pcr_model)
test_grad <- predict(pcr_model, newdata = grad_pcr)
summary(test_grad)
actual_values <- grad_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
test_peri <- predict(grad_pcr_model, newdata = peridice_pcr)
actual_values <- peridice_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
# group_by(predicted1, predicted2, predicted3, actual) %>%
# mutate(predicted = mean(colMeans(df[c('predicted1', 'predicted2', 'predicted3')], na.rm = TRUE))) %>%
mutate(predicted = mean(across(c(predicted1,
predicted2, predicted3), mean, na.rm = TRUE)))
summary(grad_pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
test_grad <- predict(pcr_model, newdata = grad_pcr)
actual_values <- grad_pcr$nmol
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.nmol.1.comps) %>%
rename(predicted2 = predicted.nmol.2.comps) %>%
rename(predicted3 = predicted.nmol.3.comps)
summary(pcr_model)
results <- data.frame(actual = actual_values, predicted = test_grad)
View(results)
pcr_model <- pcr(nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
pcr_model <- pcr(nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "LOO")
test_grad <- predict(pcr_model, newdata = grad_pcr)
pcr_model <- pcr(n_nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "LOO")
summary(grad_pcr_model)
results <- data.frame(actual = actual_values, predicted = test_grad) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
mutate(predicted1 = predicted1/1000) %>%
mutate(predicted2 = predicted2/1000) %>%
mutate(predicted3 = predicted3/1000)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
mutate(predicted1 = predicted1/1000) %>%
mutate(predicted2 = predicted2/1000) %>%
mutate(predicted3 = predicted3/1000)
grad_pcr_model <- pcr(n_nmol~nmol+pc+pn, data = grad_pcr, scale = TRUE, validation = "CV")
test_peri <- predict(grad_pcr_model, newdata = peridice_pcr)
actual_values <- peridice_pcr$n_nmol
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps) %>%
mutate(predicted1 = predicted1/1000) %>%
mutate(predicted2 = predicted2/1000) %>%
mutate(predicted3 = predicted3/1000)
summary(grad_pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
results <- data.frame(actual = actual_values, predicted = test_peri) %>%
rename(predicted1 = predicted.n_nmol.1.comps) %>%
rename(predicted2 = predicted.n_nmol.2.comps) %>%
rename(predicted3 = predicted.n_nmol.3.comps)
summary(grad_pcr_model)
ggplot(results, aes(x = actual, y = predicted2)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, color = "blue", linetype = "dashed") +
labs(title = "Actual vs Predicted",
x = "Actual Values",
y = "Predicted Values") +
theme_bw()
pcr_model <- pcr(nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "LOO")
pcr_model <- pcr(nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "LOO")
test_grad <- predict(pcr_model, newdata = grad_pcr)
actual_values <- grad_pcr$nmol
test_grad <- predict(pcr_model, newdata = grad_pcr)
pcr_model <- pcr(nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
test_grad <- predict(pcr_model, newdata = grad_pcr)
View(peridice_pcr)
pcr_model <- pcr(nmol~nmol+pc+pn, data = peridice_pcr, scale = TRUE, validation = "CV")
peridice <- read_csv("PERIDICE_metabolite_data.csv")
library(tidyverse)
library(ggplot2)
library(readr)
library(pls)
library(stats)
set.seed(20)
peridice <- read_csv("PERIDICE_metabolite_data.csv")
library(tidyverse)
library(ggplot2)
library(readr)
library(pls)
library(stats)
set.seed(20)
peridice <- read_csv("PERIDICE_metabolite_data.csv")
getwd
getwd()
peridice <- read_csv("PERIDICE_metabolite_data.csv")
getwd()
setwd(/Users/iriskern/Desktop/work/peridice)
setwd(Users/iriskern/Desktop/work/peridice)
gradients <- read_csv("csvs/G1_Metab_Data.csv")
getwd()
setwd(Users/iriskern/Desktop/work/peridice)
setwd("Users/iriskern/Desktop/work/peridice")
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(readr)
library(pls)
library(stats)
set.seed(20)
peridice <- read_csv("PERIDICE_metabolite_data.csv")
getwd()
setwd("/Users/iriskern/Desktop/work/peridice")
peridice <- read_csv("PERIDICE_metabolite_data.csv")
getwd()
